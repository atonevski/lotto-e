// Generated by CoffeeScript 1.10.0
var https, utils, vue;

utils = require('../js/utils.js');

https = require('https');

vue = new Vue({
  el: '#app',
  data: {
    count: null,
    lastDraw: {},
    lfreq: [],
    jfreq: [],
    drum: 'BOTH',
    showGraphs: true,
    LWIDTH: 800,
    LHEIGHT: 500,
    lmargins: {
      top: 20,
      right: 120,
      bottom: 20,
      left: 40
    },
    JWIDTH: 800,
    JHEIGHT: 500,
    jmargins: {
      top: 20,
      right: 120,
      bottom: 20,
      left: 40
    }
  },
  filters: {
    number: function(v) {
      if ((v != null) && typeof v.toLocaleString === 'function') {
        return v.toLocaleString();
      } else {
        return '';
      }
    },
    toYMD: utils.toYMD,
    toDMY: utils.toDMY
  },
  methods: {
    toggleShow: function() {
      return this.showGraphs = !this.showGraphs;
    },
    getLastDraw: function() {
      var q;
      q = 'SELECT A, B\nORDER BY B DESC\nLIMIT 1\nLABEL A \'number\', B \'date\'';
      return https.get(utils.qstring(q), (function(_this) {
        return function(res) {
          var body;
          body = '';
          res.setEncoding('utf-8');
          res.on('data', function(d) {
            return body += d;
          });
          res.on('error', function(e) {
            return console.log("query error: " + e);
          });
          return res.on('end', function() {
            var json;
            json = utils.parseResponse(body.toString());
            return _this.lastDraw = (utils.qresult(json))[0];
          });
        };
      })(this));
    },
    getTotalDraws: function() {
      var q;
      q = 'SELECT COUNT(A)\nLABEL COUNT(A) \'count\'';
      return https.get(utils.qstring(q), (function(_this) {
        return function(res) {
          var body;
          body = '';
          res.setEncoding('utf-8');
          res.on('data', function(d) {
            return body += d;
          });
          res.on('error', function(e) {
            return console.log("query error: " + e);
          });
          return res.on('end', function() {
            var json;
            json = utils.parseResponse(body);
            return _this.count = (utils.qresult(json))[0].count;
          });
        };
      })(this));
    },
    drawJgraph: function() {
      var color, data, dataIntermediate, i, j, k, keys, l, ref, results, svg, totf, xAxis, xRange, xmax, xmin, yAxis, yRange, ymax, ymin;
      svg = d3.select('#id-jgraph').attr('class', 'axis').attr('width', this.JWIDTH + 'px').attr('height', this.JHEIGHT + 'px');
      ref = [0, 9], xmin = ref[0], xmax = ref[1];
      ymin = 0;
      ymax = d3.max(this.jfreq, function(n) {
        return n.reduce(function(x, s) {
          return x + s;
        }, 0);
      });
      xRange = d3.scaleBand().range([this.jmargins.left, this.JWIDTH - this.jmargins.right]).domain((function() {
        results = [];
        for (var j = xmin; xmin <= xmax ? j <= xmax : j >= xmax; xmin <= xmax ? j++ : j--){ results.push(j); }
        return results;
      }).apply(this)).padding(0.2);
      yRange = d3.scaleLinear().range([this.JHEIGHT - this.jmargins.top, this.jmargins.bottom]).domain([ymin, ymax]);
      xAxis = d3.axisBottom(xRange);
      yAxis = d3.axisLeft(yRange);
      svg.select('g#jxaxis').remove();
      svg.append('g').attr('id', 'jxaxis').attr('class', 'x axis').attr('transform', "translate(0, " + (this.JHEIGHT - this.jmargins.bottom) + ")").call(xAxis);
      svg.select('g#jyaxis').remove();
      svg.append('g').attr('id', 'jyaxis').attr('class', 'y axis').attr('transform', "translate(" + this.jmargins.left + ", 0)").call(yAxis);
      svg.select('g#jtitle').remove();
      svg.append('g').attr('id', 'ltitle').append('text').attr('fill', '#93a1a1').attr('x', xRange(Math.round((xmin + xmax) / 2))).attr('y', yRange(ymax)).attr('dy', '-0.35em').attr('text-anchor', 'middle').text('Joker digits frequencies');
      dataIntermediate = this.jfreq.map(function(r, i) {
        return {
          number: i,
          first: r[0],
          second: r[1],
          third: r[2],
          forth: r[3],
          fifth: r[4],
          sixth: r[5]
        };
      });
      keys = ['first', 'second', 'third', 'forth', 'fifth', 'sixth'];
      totf = [];
      for (i = k = 0; k <= 9; i = ++k) {
        totf[i] = this.jfreq[i].reduce(function(a, s) {
          return a + s;
        }, 0);
      }
      data = d3.stack().keys(keys)(dataIntermediate);
      color = d3.scaleOrdinal().unknown("#ccc").domain([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]).range(d3.quantize((function(t) {
        return d3.interpolateSpectral(t * 0.8 + 0.1);
      }), data.length).reverse());
      svg.select('g#id-jbars').remove();
      svg.append('g').attr('id', 'id-jbars').selectAll('g').data(data).enter().append('g').attr('fill', function(d, i) {
        return color(i);
      }).selectAll('rect').data(function(d) {
        return d;
      }).enter().append('rect').attr('x', function(d, i) {
        return xRange(i);
      }).attr('y', function(d) {
        return yRange(d[1]);
      }).attr('height', function(d) {
        return yRange(d[0]) - yRange(d[1]);
      }).attr('width', xRange.bandwidth()).append('title').text(function(d, i) {
        return i + ": " + totf[i];
      });
      svg.select('g#id-jlegend').remove();
      l = svg.append('g').attr('id', 'jlegend').attr('transform', "translate(" + (this.JWIDTH - 25) + ", " + this.jmargins.top + ")").selectAll('g').data(keys.reverse()).enter().append('g').attr('transform', function(d, i) {
        return "translate(0, " + (i * 20) + ")";
      });
      l.append('rect').attr('x', -19).attr('width', 19).attr('height', 19).attr('fill', function(d, i) {
        return color(keys.length - i);
      });
      l.append('text').attr('font-size', '70%').attr('x', -60).attr('y', 9.5).attr('dy', '0.35em').attr('fill', '#93a1a1').text(function(d) {
        return d;
      });
      return null;
    },
    drawLgraph: function() {
      var color, data, dataIntermediate, i, j, k, keys, l, m, ref, results, results1, svg, totf, xAxis, xRange, xmax, xmin, yAxis, yRange, ymax, ymin;
      svg = d3.select('#id-lgraph').attr('class', 'axis').attr('width', this.LWIDTH + 'px').attr('height', this.LHEIGHT + 'px');
      ref = [1, 34], xmin = ref[0], xmax = ref[1];
      ymin = 0;
      ymax = d3.max(this.lfreq.slice(1, 35), function(n) {
        return n.reduce(function(x, s) {
          return x + s;
        }, 0);
      });
      xRange = d3.scaleBand().range([this.lmargins.left, this.LWIDTH - this.lmargins.right]).domain((function() {
        results = [];
        for (var j = xmin; xmin <= xmax ? j <= xmax : j >= xmax; xmin <= xmax ? j++ : j--){ results.push(j); }
        return results;
      }).apply(this)).padding(0.2);
      yRange = d3.scaleLinear().range([this.LHEIGHT - this.lmargins.top, this.lmargins.bottom]).domain([ymin, ymax]);
      xAxis = d3.axisBottom(xRange);
      yAxis = d3.axisLeft(yRange);
      svg.select('g#lxaxis').remove();
      svg.append('g').attr('id', 'lxaxis').attr('class', 'x axis').attr('transform', "translate(0, " + (this.LHEIGHT - this.lmargins.bottom) + ")").call(xAxis);
      svg.select('g#lyaxis').remove();
      svg.append('g').attr('id', 'lyaxis').attr('class', 'y axis').attr('transform', "translate(" + this.lmargins.left + ", 0)").call(yAxis);
      svg.select('g#ltitle').remove();
      svg.append('g').attr('id', 'ltitle').append('text').attr('fill', '#93a1a1').attr('x', xRange(Math.round((xmin + xmax) / 2))).attr('y', yRange(ymax)).attr('dy', '-0.35em').attr('text-anchor', 'middle').text('Number frequencies');
      dataIntermediate = this.lfreq.slice(1, 35).map(function(r, i) {
        return {
          number: i + 1,
          first: r[0],
          second: r[1],
          third: r[2],
          forth: r[3],
          fifth: r[4],
          sixth: r[5],
          seventh: r[6],
          extra: r[7]
        };
      });
      keys = ['first', 'second', 'third', 'forth', 'fifth', 'sixth', 'seventh', 'extra'];
      totf = [];
      for (i = k = 1; k <= 34; i = ++k) {
        totf[i] = this.lfreq[i].reduce(function(a, s) {
          return a + s;
        }, 0);
      }
      data = d3.stack().keys(keys)(dataIntermediate);
      color = d3.scaleOrdinal().unknown("#ccc").domain((function() {
        results1 = [];
        for (m = 1; m <= 34; m++){ results1.push(m); }
        return results1;
      }).apply(this)).range(d3.quantize((function(t) {
        return d3.interpolateSpectral(t * 0.8 + 0.1);
      }), data.length).reverse());
      svg.select('g#id-lbars').remove();
      svg.append('g').attr('id', 'id-lbars').selectAll('g').data(data).enter().append('g').attr('fill', function(d, i) {
        return color(i + 1);
      }).selectAll('rect').data(function(d) {
        return d;
      }).enter().append('rect').attr('x', function(d, i) {
        return xRange(i + 1);
      }).attr('y', function(d) {
        return yRange(d[1]);
      }).attr('height', function(d) {
        return yRange(d[0]) - yRange(d[1]);
      }).attr('width', xRange.bandwidth()).append('title').text(function(d, i) {
        return (i + 1) + ": " + totf[i + 1];
      });
      svg.select('g#id-llegend').remove();
      l = svg.append('g').attr('id', 'llegend').attr('transform', "translate(" + (this.LWIDTH - 25) + ", " + this.lmargins.top + ")").selectAll('g').data(keys.reverse()).enter().append('g').attr('transform', function(d, i) {
        return "translate(0, " + (i * 20) + ")";
      });
      l.append('rect').attr('x', -19).attr('width', 19).attr('height', 19).attr('fill', function(d, i) {
        return color(keys.length - i);
      });
      l.append('text').attr('font-size', '70%').attr('x', -60).attr('y', 9.5).attr('dy', '0.35em').attr('fill', '#93a1a1').text(function(d) {
        return d;
      });
      return null;
    },
    getFreq: function() {
      var i, j, jq, lfreq, lq;
      lfreq = [];
      for (i = j = 0; j <= 34; i = ++j) {
        lfreq.push([0, 0, 0, 0, 0, 0, 0, 0]);
      }
      lq = 'SELECT X, Y, Z, AA, AB, AC, AD, AE\n:filter';
      lq = (function() {
        switch (this.drum) {
          case utils.VENUS:
            return lq.replace(/\:filter/, "WHERE B <= date '" + (utils.toYMD(utils.VENUS_DATE)) + "'");
          case utils.STRESA:
            return lq.replace(/\:filter/, "WHERE B >= date '" + (utils.toYMD(utils.STRESA_DATE)) + "'");
          default:
            return lq.replace(/\:filter/, '');
        }
      }).call(this);
      https.get(utils.qstring(lq), (function(_this) {
        return function(res) {
          var body;
          body = '';
          res.setEncoding('utf-8');
          res.on('data', function(d) {
            return body += d;
          });
          res.on('error', function(e) {
            return console.log("query error: " + e);
          });
          res.on('end', function() {
            var json, k, len, r, recs;
            json = utils.parseResponse(body);
            recs = utils.qresult(json);
            for (k = 0, len = recs.length; k < len; k++) {
              r = recs[k];
              lfreq[r.lwc1][0] += 1;
              lfreq[r.lwc2][1] += 1;
              lfreq[r.lwc3][2] += 1;
              lfreq[r.lwc4][3] += 1;
              lfreq[r.lwc5][4] += 1;
              lfreq[r.lwc6][5] += 1;
              lfreq[r.lwc7][6] += 1;
              lfreq[r.lwcp][7] += 1;
            }
            _this.lfreq = lfreq;
            return _this.drawLgraph();
          });
          return null;
        };
      })(this));
      jq = 'SELECT BE\n:filter';
      jq = (function() {
        switch (this.drum) {
          case utils.VENUS:
            return jq.replace(/\:filter/, "WHERE B <= date '" + (utils.toYMD(utils.VENUS_DATE)) + "'");
          case utils.STRESA:
            return jq.replace(/\:filter/, "WHERE B >= date '" + (utils.toYMD(utils.STRESA_DATE)) + "'");
          default:
            return jq.replace(/\:filter/, '');
        }
      }).call(this);
      https.get(utils.qstring(jq), (function(_this) {
        return function(res) {
          var body, jfreq, k;
          jfreq = [];
          for (i = k = 0; k <= 9; i = ++k) {
            jfreq.push([0, 0, 0, 0, 0, 0]);
          }
          body = '';
          res.setEncoding('utf-8');
          res.on('data', function(d) {
            return body += d;
          });
          res.on('error', function(e) {
            return console.log("query error: " + e);
          });
          res.on('end', function() {
            var a, arr, json, len, m, n, recs;
            json = utils.parseResponse(body);
            recs = utils.qresult(json);
            arr = recs.map(function(r) {
              return r.jwc.split('').map(function(e) {
                return parseInt(e);
              });
            });
            for (m = 0, len = arr.length; m < len; m++) {
              a = arr[m];
              for (i in a) {
                n = a[i];
                jfreq[n][i]++;
              }
            }
            _this.jfreq = jfreq;
            return _this.drawJgraph();
          });
          return null;
        };
      })(this));
      return null;
    },
    drumChanged: function() {
      console.log("Drum is:", this.drum);
      return this.getFreq();
    }
  },
  created: function() {
    this.getTotalDraws();
    this.getLastDraw();
    return this.getFreq();
  }
});
