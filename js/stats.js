// Generated by CoffeeScript 2.3.2
// stats.coffee

var https, utils, vue;

utils = require('../js/utils.js');

https = require('https');

vue = new Vue({
  el: '#app',
  filters: {
    number: function(v) {
      if ((v != null) && typeof v.toLocaleString === 'function') {
        return v.toLocaleString();
      } else {
        return '';
      }
    },
    toYMD: utils.toYMD,
    toDMY: utils.toDMY
  },
  methods: {
    getStats: function() {
      var jq, jq4, jq5, q, q6, q6p;
      q = 'SELECT\n  YEAR(B),\n  COUNT(B),\n  MIN(C),AVG(C), MAX(C),\n  SUM(D), SUM(E),\n  AVG(F), AVG(G), AVG(H)\nGROUP BY YEAR(B)\nORDER BY YEAR(B)\nLABEL YEAR(B) \'year\', COUNT(B) \'draws\',\n      MIN(C) \'minLsales\', AVG(C) \'avgLsales\', MAX(C) \'maxLsales\',\n      SUM(D) \'x7\', SUM(E) \'x6p\',\n      AVG(F) \'x6\', AVG(G) \'x5\', AVG(H) \'x4\'';
      q6p = 'SELECT\n  YEAR(B),\n  COUNT(E)\nWHERE\n  E > 0\nGROUP BY YEAR(B)\nORDER BY YEAR(B)\nLABEL YEAR(B) \'year\', COUNT(E) \'x6pDraws\'';
      q6 = 'SELECT\n  YEAR(B),\n  COUNT(F)\nWHERE\n  F > 0\nGROUP BY YEAR(B)\nORDER BY YEAR(B)\nLABEL YEAR(B) \'year\', COUNT(F) \'x6Draws\'';
      this.lstats = [];
      this.lstats6p = [];
      this.lstats6 = [];
      https.get(utils.qstring(q), (res) => {
        var body;
        body = '';
        res.setEncoding('utf-8');
        res.on('data', function(d) {
          return body += d;
        });
        res.on('error', function(e) {
          return console.log(`query error: ${e}`);
        });
        return res.on('end', () => {
          var json;
          json = utils.parseResponse(body);
          return this.lstats = utils.qresult(json);
        });
      });
      https.get(utils.qstring(q6p), (res) => {
        var body;
        body = '';
        res.setEncoding('utf-8');
        res.on('data', function(d) {
          return body += d;
        });
        res.on('error', function(e) {
          return console.log(`query error: ${e}`);
        });
        return res.on('end', () => {
          var json;
          json = utils.parseResponse(body);
          return this.lstats6p = utils.qresult(json);
        });
      });
      https.get(utils.qstring(q6), (res) => {
        var body;
        body = '';
        res.setEncoding('utf-8');
        res.on('data', function(d) {
          return body += d;
        });
        res.on('error', function(e) {
          return console.log(`query error: ${e}`);
        });
        return res.on('end', () => {
          var json;
          json = utils.parseResponse(body);
          return this.lstats6 = utils.qresult(json);
        });
      });
      jq = 'SELECT\n  YEAR(B),\n  COUNT(B),\n  MIN(AF),AVG(AF), MAX(AF),\n  SUM(AG), SUM(AH),\n  AVG(AI), AVG(AJ), AVG(AK), AVG(AL)\nGROUP BY YEAR(B)\nORDER BY YEAR(B)\nLABEL YEAR(B) \'year\', COUNT(B) \'draws\',\n      MIN(AF) \'minJsales\', AVG(AF) \'avgJsales\', MAX(AF) \'maxJsales\',\n      SUM(AG) \'x6\', SUM(AH) \'x5\',\n      AVG(AI) \'x4\', AVG(AJ) \'x3\', AVG(AK) \'x2\', AVG(AL) \'x1\'';
      jq5 = 'SELECT\n  YEAR(B),\n  COUNT(AH)\nWHERE\n  AH > 0\nGROUP BY YEAR(B)\nORDER BY YEAR(B)\nLABEL YEAR(B) \'year\', COUNT(AH) \'x5Draws\'';
      jq4 = 'SELECT\n  YEAR(B),\n  COUNT(AI)\nWHERE\n  AI > 0\nGROUP BY YEAR(B)\nORDER BY YEAR(B)\nLABEL YEAR(B) \'year\', COUNT(AI) \'x4Draws\'';
      this.jstats = [];
      this.jstats5 = [];
      this.jstats4 = [];
      https.get(utils.qstring(jq), (res) => {
        var body;
        body = '';
        res.setEncoding('utf-8');
        res.on('data', function(d) {
          return body += d;
        });
        res.on('error', function(e) {
          return console.log(`query error: ${e}`);
        });
        return res.on('end', () => {
          var json;
          json = utils.parseResponse(body);
          return this.jstats = utils.qresult(json);
        });
      });
      https.get(utils.qstring(jq5), (res) => {
        var body;
        body = '';
        res.setEncoding('utf-8');
        res.on('data', function(d) {
          return body += d;
        });
        res.on('error', function(e) {
          return console.log(`query error: ${e}`);
        });
        return res.on('end', () => {
          var json;
          json = utils.parseResponse(body);
          return this.jstats5 = utils.qresult(json);
        });
      });
      return https.get(utils.qstring(jq4), (res) => {
        var body;
        body = '';
        res.setEncoding('utf-8');
        res.on('data', function(d) {
          return body += d;
        });
        res.on('error', function(e) {
          return console.log(`query error: ${e}`);
        });
        return res.on('end', () => {
          var json;
          json = utils.parseResponse(body);
          return this.jstats4 = utils.qresult(json);
        });
      });
    },
    getLastDraw: function() {
      var q;
      q = 'SELECT A, B\nORDER BY B DESC\nLIMIT 1\nLABEL A \'number\', B \'date\'';
      return https.get(utils.qstring(q), (res) => {
        var body;
        body = '';
        res.setEncoding('utf-8');
        res.on('data', function(d) {
          return body += d;
        });
        res.on('error', function(e) {
          return console.log(`query error: ${e}`);
        });
        return res.on('end', () => {
          var json;
          json = utils.parseResponse(body.toString());
          return this.lastDraw = (utils.qresult(json))[0];
        });
      });
    },
    getTotalDraws: function() {
      var q;
      q = 'SELECT COUNT(A)\nLABEL COUNT(A) \'count\' ';
      return https.get(utils.qstring(q), (res) => {
        var body;
        body = '';
        res.setEncoding('utf-8');
        res.on('data', function(d) {
          return body += d;
        });
        res.on('error', function(e) {
          return console.log(`query error: ${e}`);
        });
        return res.on('end', () => {
          var json;
          json = utils.parseResponse(body);
          return this.count = (utils.qresult(json))[0].count;
        });
      });
    }
  },
  data: {
    count: null,
    lastDraw: {},
    lstats: [],
    lstats6p: [],
    lstats6: [],
    jstats: [],
    jstats5: [],
    jstats4: []
  },
  created: function() {
    this.getTotalDraws();
    this.getLastDraw();
    return this.getStats();
  }
});


//   draw no., date
//   A         B
//   lsales, lx7, lx6p, lx6, lx5, lx4, lmx7, lmx6p, lmx6, lmx5, lmx4,
//   C       D    E     F    G    H    I     J     K      L     M
//           lfx7, lfx6p, lfx6, lfx5, lfx4, ljx7, ljx6p, ljx6, ljx5, ljx4,
//           N      O     P     Q     R     S      T     U     V     W
//           lwc1, lwc2, lwc3, lwc4, lwc5, lwc6, lwc7, lwcp
//           X     Y     Z     AA    AB    AC    AD     AE
//   jsales, jx6, jx5, jx4, jx3, jx2, jx1, jmx6, jmx5, jmx4, jmx3, jmx2, jmx1,
//   AF      AG   AH   AI   AJ   AK   AL   AM    AN    AO    AP    AQ    AR
//           jfx6, jfx5, jfx4, jfx3, jfx2, jfx1, jjx6, jjx5, jjx4, jjx3, jjx2, jjx1,
//           AS    AT    AU    AV    AW    AX    AY    AZ    BA    BB    BC    BD
//           jwc
//           BE
