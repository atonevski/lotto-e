// Generated by CoffeeScript 1.10.0
var http, https, request, utils, vue;

utils = require('../js/utils.js');

https = require('https');

http = require('http');

request = require('request');

vue = new Vue({
  el: '#app',
  data: {
    count: null,
    lastDraw: {},
    year: 2018,
    draw: 81,
    html: null,
    info: null
  },
  filters: {
    number: function(v) {
      if ((v != null) && typeof v.toLocaleString === 'function') {
        return v.toLocaleString();
      } else {
        return '';
      }
    },
    toYMD: utils.toYMD,
    toDMY: utils.toDMY
  },
  methods: {
    getLastDraw: function() {
      var q;
      q = 'SELECT A, B\nORDER BY B DESC\nLIMIT 1\nLABEL A \'number\', B \'date\'';
      return https.get(utils.qstring(q), (function(_this) {
        return function(res) {
          var body;
          body = '';
          res.setEncoding('utf-8');
          res.on('data', function(d) {
            return body += d;
          });
          res.on('error', function(e) {
            return console.log("query error: " + e);
          });
          return res.on('end', function() {
            var json;
            json = utils.parseResponse(body.toString());
            return _this.lastDraw = (utils.qresult(json))[0];
          });
        };
      })(this));
    },
    getTotalDraws: function() {
      var q;
      q = 'SELECT COUNT(A)\nLABEL COUNT(A) \'count\'';
      return https.get(utils.qstring(q), (function(_this) {
        return function(res) {
          var body;
          body = '';
          res.setEncoding('utf-8');
          res.on('data', function(d) {
            return body += d;
          });
          res.on('error', function(e) {
            return console.log("query error: " + e);
          });
          return res.on('end', function() {
            var json;
            json = utils.parseResponse(body);
            return _this.count = (utils.qresult(json))[0].count;
          });
        };
      })(this));
    },
    fetchDraw: function() {
      var params;
      params = {
        godStr: this.year.toString(),
        koloStr: this.draw.toString()
      };
      return request.post({
        url: utils.L_URL,
        body: params,
        json: true
      }, (function(_this) {
        return function(err, res, body) {
          _this.html = body.d;
          _this.info = utils.parseL(_this.html);
          return console.log(_this.info);
        };
      })(this));
    }
  },
  created: function() {
    this.getTotalDraws();
    this.getLastDraw();
    return this.fetchDraw();
  }
});
