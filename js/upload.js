// Generated by CoffeeScript 2.3.2
// upload.coffe:
// - reads and parses data from draw report
// - updates gs db

var http, https, request, utils, vue;

utils = require('../js/utils.js');

https = require('https');

http = require('http');

request = require('request');

vue = new Vue({
  el: '#app',
  data: {
    count: null,
    lastDraw: {},
    nextDraw: null,
    year: 2018,
    draw: 81,
    html: null,
    info: null
  },
  filters: {
    number: function(v) {
      if ((v != null) && typeof v.toLocaleString === 'function') {
        return v.toLocaleString();
      } else {
        return '';
      }
    },
    toYMD: utils.toYMD,
    toDMY: utils.toDMY
  },
  methods: {
    nextDrawAvail: function(d) {
      var today;
      today = new Date();
      return (this.nextDraw != null) && (this.nextDraw.date <= new Date(today.getTime() + 24 * 60 * 60 * 1000));
    },
    getNextDraw: function(d) {
      return utils.nextDraw(d);
    },
    getLastDraw: function() {
      var q;
      this.nextDraw = null;
      q = 'SELECT A, B\nORDER BY B DESC\nLIMIT 1\nLABEL A \'draw\', B \'date\'';
      return https.get(utils.qstring(q), (res) => {
        var body;
        body = '';
        res.setEncoding('utf-8');
        res.on('data', function(d) {
          return body += d;
        });
        res.on('error', function(e) {
          return console.log(`query error: ${e}`);
        });
        return res.on('end', () => {
          var json;
          json = utils.parseResponse(body.toString());
          this.lastDraw = (utils.qresult(json))[0];
          return this.nextDraw = this.getNextDraw(this.lastDraw);
        });
      });
    },
    getTotalDraws: function() {
      var q;
      q = 'SELECT COUNT(A)\nLABEL COUNT(A) \'count\'';
      return https.get(utils.qstring(q), (res) => {
        var body;
        body = '';
        res.setEncoding('utf-8');
        res.on('data', function(d) {
          return body += d;
        });
        res.on('error', function(e) {
          return console.log(`query error: ${e}`);
        });
        return res.on('end', () => {
          var json;
          json = utils.parseResponse(body);
          return this.count = (utils.qresult(json))[0].count;
        });
      });
    },
    fetchDraw: function() {
      var params;
      params = {
        godStr: this.year.toString(),
        koloStr: this.draw.toString()
      };
      // http.post utils.L_URL, params, (res) =>
      //   body = ''
      //   res.setEncoding 'utf-8'
      //   res.on 'data', (d) -> body += d
      //   res.on 'error', (e) -> console.log "draw report error: #{ e }"
      //   res.on 'end', () =>
      //     @html = body
      //     console.log @html
      //     # parse here
      return request.post({
        url: utils.L_URL,
        body: params,
        json: true
      }, (err, res, body) => {
        this.html = body.d;
        this.info = utils.parseL(this.html);
        console.log(this.info);
        return console.log("serializeDrawInfo:", this.serializeDrawInfo(this.info));
      });
    },
    serializeDrawInfo: function(i) {
      var s;
      // serialize draw info
      s = `draw=${i.draw}&date=${utils.toDMY(i.date)}&`;
      // LOTTO
      // lotto sales
      s += `lsales=${i.lsales}&`;
      // lotto winners & winnings
      s += `lx7=${i.lx7}&lx6p=${i.lx6p}&lx6=${i.lx6}&lx5=${i.lx5}&lx4=${i.lx4}&`;
      s += `lmx7=${i.lmx7}&lmx6p=${i.lmx6p}&lmx6=${i.lmx6}&lmx5=${i.lmx5}&lmx4=${i.lmx4}&`;
      // lotto funds & jackpots
      s += `lfx7=${i.lfx7}&lfx6p=${i.lfx6p}&lfx6=${i.lfx6}&lfx5=${i.lfx5}&lfx4=${i.lfx4}&`;
      s += `ljx7=${i.ljx7}&ljx6p=${i.ljx6p}&ljx6=${i.ljx6}&ljx5=${i.ljx5}&ljx4=${i.ljx4}&`;
      // lotto winning column
      s += `lwc1=${i.lwc1}&lwc2=${i.lwc2}&lwc3=${i.lwc3}&lwc4=${i.lwc4}` + `&lwc5=${i.lwc5}&lwc6=${i.lwc6}&lwc7=${i.lwc7}&lwcp=${i.lwcp}&`;
      // JOKER
      // joker sales
      s += `jsales=${i.jsales}&`;
      // joker winner & winnings
      s += `jx6=${i.jx6}&jx5=${i.jx5}&jx4=${i.jx4}&` + `jx3=${i.jx3}&jx2=${i.jx2}&jx1=${i.jx1}&`;
      s += `jmx6=${i.jmx6}&jmx5=${i.jmx5}&jmx4=${i.jmx4}&` + `jmx3=${i.jmx3}&jmx2=${i.jmx2}&jmx1=${i.jmx1}&`;
      // joker funds & jackpots
      s += `jfx6=${i.jfx6}&jfx5=${i.jfx5}&jfx4=${i.jfx4}&` + `jfx3=${i.jfx3}&jfx2=${i.jfx2}&jfx1=${i.jfx1}&`;
      s += `jjx6=${i.jjx6}&jjx5=${i.jjx5}&jjx4=${i.jjx4}&` + `jjx3=${i.jjx3}&jjx2=${i.jjx2}&jjx1=${i.jjx1}&`;
      // joker winning column
      return s += `jwc=${i.jwc}`;
    }
  },
  created: function() {
    this.getTotalDraws();
    this.getLastDraw();
    return this.fetchDraw();
  }
});
