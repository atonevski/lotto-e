// Generated by CoffeeScript 1.10.0
var http, https, request, utils, vue;

utils = require('../js/utils.js');

https = require('https');

http = require('http');

request = require('request');

vue = new Vue({
  el: '#app',
  data: {
    count: null,
    lastDraw: {},
    nextDraw: null,
    html: null,
    info: null
  },
  filters: {
    number: function(v) {
      if ((v != null) && typeof v.toLocaleString === 'function') {
        return v.toLocaleString();
      } else {
        return '';
      }
    },
    toYMD: utils.toYMD,
    toDMY: utils.toDMY
  },
  methods: {
    nextDrawAvail: function(d) {
      var today;
      today = new Date();
      console.log(new Date(this.nextDraw.date.getTime() + 21 * 60 * 60 * 1000));
      console.log(new Date(today.getTime()));
      return (this.nextDraw != null) && new Date(this.nextDraw.date.getTime() + 21 * 60 * 60 * 1000) <= today.getTime();
    },
    getNextDraw: function(d) {
      return utils.nextDraw(d);
    },
    getLastDraw: function() {
      var q;
      this.nextDraw = null;
      q = 'SELECT A, B\nORDER BY B DESC\nLIMIT 1\nLABEL A \'draw\', B \'date\'';
      return https.get(utils.qstring(q), (function(_this) {
        return function(res) {
          var body;
          body = '';
          res.setEncoding('utf-8');
          res.on('data', function(d) {
            return body += d;
          });
          res.on('error', function(e) {
            return console.log("query error: " + e);
          });
          return res.on('end', function() {
            var json;
            json = utils.parseResponse(body.toString());
            _this.lastDraw = (utils.qresult(json))[0];
            return _this.nextDraw = _this.getNextDraw(_this.lastDraw);
          });
        };
      })(this));
    },
    getTotalDraws: function() {
      var q;
      q = 'SELECT COUNT(A)\nLABEL COUNT(A) \'count\'';
      return https.get(utils.qstring(q), (function(_this) {
        return function(res) {
          var body;
          body = '';
          res.setEncoding('utf-8');
          res.on('data', function(d) {
            return body += d;
          });
          res.on('error', function(e) {
            return console.log("query error: " + e);
          });
          return res.on('end', function() {
            var json;
            json = utils.parseResponse(body);
            return _this.count = (utils.qresult(json))[0].count;
          });
        };
      })(this));
    },
    fetchDrawAndUpload: function() {
      var params;
      if (!this.nextDraw) {
        throw "Next draw not available";
      }
      params = {
        godStr: this.nextDraw.date.getFullYear().toString(),
        koloStr: this.nextDraw.draw.toString()
      };
      return request.post({
        url: utils.L_URL,
        body: params,
        json: true
      }, (function(_this) {
        return function(err, res, body) {
          _this.html = body.d;
          _this.info = utils.parseL(_this.html);
          console.log(_this.info);
          console.log("serializeDrawInfo:", _this.serializeDrawInfo(_this.info));
          return _this.upload();
        };
      })(this));
    },
    serializeDrawInfo: function(i) {
      var s;
      s = "draw=" + i.draw + "&date=" + (utils.toDMY(i.date)) + "&";
      s += "lsales=" + i.lsales + "&";
      s += "lx7=" + i.lx7 + "&lx6p=" + i.lx6p + "&lx6=" + i.lx6 + "&lx5=" + i.lx5 + "&lx4=" + i.lx4 + "&";
      s += "lmx7=" + i.lmx7 + "&lmx6p=" + i.lmx6p + "&lmx6=" + i.lmx6 + "&lmx5=" + i.lmx5 + "&lmx4=" + i.lmx4 + "&";
      s += "lfx7=" + i.lfx7 + "&lfx6p=" + i.lfx6p + "&lfx6=" + i.lfx6 + "&lfx5=" + i.lfx5 + "&lfx4=" + i.lfx4 + "&";
      s += "ljx7=" + i.ljx7 + "&ljx6p=" + i.ljx6p + "&ljx6=" + i.ljx6 + "&ljx5=" + i.ljx5 + "&ljx4=" + i.ljx4 + "&";
      s += ("lwc1=" + i.lwc1 + "&lwc2=" + i.lwc2 + "&lwc3=" + i.lwc3 + "&lwc4=" + i.lwc4) + ("&lwc5=" + i.lwc5 + "&lwc6=" + i.lwc6 + "&lwc7=" + i.lwc7 + "&lwcp=" + i.lwcp + "&");
      s += "jsales=" + i.jsales + "&";
      s += ("jx6=" + i.jx6 + "&jx5=" + i.jx5 + "&jx4=" + i.jx4 + "&") + ("jx3=" + i.jx3 + "&jx2=" + i.jx2 + "&jx1=" + i.jx1 + "&");
      s += ("jmx6=" + i.jmx6 + "&jmx5=" + i.jmx5 + "&jmx4=" + i.jmx4 + "&") + ("jmx3=" + i.jmx3 + "&jmx2=" + i.jmx2 + "&jmx1=" + i.jmx1 + "&");
      s += ("jfx6=" + i.jfx6 + "&jfx5=" + i.jfx5 + "&jfx4=" + i.jfx4 + "&") + ("jfx3=" + i.jfx3 + "&jfx2=" + i.jfx2 + "&jfx1=" + i.jfx1 + "&");
      s += ("jjx6=" + i.jjx6 + "&jjx5=" + i.jjx5 + "&jjx4=" + i.jjx4 + "&") + ("jjx3=" + i.jjx3 + "&jjx2=" + i.jjx2 + "&jjx1=" + i.jjx1 + "&");
      return s += "jwc=" + i.jwc;
    },
    upload: function() {
      if (!this.info) {
        throw "Invalid draw info";
      }
      return request.post({
        url: utils.APPEND_ULR,
        body: this.serializeDrawInfo(this.info)
      }, (function(_this) {
        return function(err, res, body) {
          console.log("Upload status code: " + res.statusCode);
          if (res.statusCode === 200) {
            _this.getTotalDraws();
            return _this.getLastDraw();
          }
        };
      })(this));
    }
  },
  created: function() {
    this.getTotalDraws();
    return this.getLastDraw();
  }
});
