// Generated by CoffeeScript 2.3.2
// cat
// cat2.coffee: 2nd category winners

var https, utils, vue;

utils = require('../js/utils.js');

https = require('https');

vue = new Vue({
  el: '#app',
  filters: {
    number: function(v) {
      if ((v != null) && typeof v.toLocaleString === 'function') {
        return v.toLocaleString();
      } else {
        return '';
      }
    },
    toYMD: utils.toYMD,
    toDMY: utils.toDMY
  },
  methods: {
    getLastDraw: function() {
      var q;
      q = 'SELECT A, B\nORDER BY B DESC\nLIMIT 1\nLABEL A \'number\', B \'date\'';
      return https.get(utils.qstring(q), (res) => {
        var body;
        body = '';
        res.setEncoding('utf-8');
        res.on('data', function(d) {
          return body += d;
        });
        res.on('error', function(e) {
          return console.log(`query error: ${e}`);
        });
        return res.on('end', () => {
          var json;
          json = utils.parseResponse(body.toString());
          return this.lastDraw = (utils.qresult(json))[0];
        });
      });
    },
    getTotalDraws: function() {
      var q;
      q = 'SELECT COUNT(A)\nLABEL COUNT(A) \'count\'';
      return https.get(utils.qstring(q), (res) => {
        var body;
        body = '';
        res.setEncoding('utf-8');
        res.on('data', function(d) {
          return body += d;
        });
        res.on('error', function(e) {
          return console.log(`query error: ${e}`);
        });
        return res.on('end', () => {
          var json;
          json = utils.parseResponse(body);
          return this.count = (utils.qresult(json))[0].count;
        });
      });
    },
    getWinners: function() {
      var jq, lq;
      this.ldraws = [];
      lq = 'SELECT\n  A, B, E,\n  J, O, T\nWHERE\n  E > 0\nORDER BY B\nLABEL A \'draw\', B \'date\',\n      E \'x6p\',  J \'winnings\', O \'funds\', T \'jackpot\'';
      https.get(utils.qstring(lq), (res) => {
        var body;
        body = '';
        res.setEncoding('utf-8');
        res.on('data', function(d) {
          return body += d;
        });
        res.on('error', function(e) {
          return console.log(`query error: ${e}`);
        });
        return res.on('end', () => {
          var json;
          json = utils.parseResponse(body);
          return this.ldraws = utils.qresult(json);
        });
      });
      this.jdraws = [];
      jq = 'SELECT\n  A, B,\n  AH, AN, AT, AZ\nWHERE\n  AH > 0\nORDER BY B\nLABEL A \'draw\', B \'date\',\n      AH \'x5\',  AN \'winnings\', AT \'funds\', AZ \'jackpot\'';
      return https.get(utils.qstring(jq), (res) => {
        var body;
        body = '';
        res.setEncoding('utf-8');
        res.on('data', function(d) {
          return body += d;
        });
        res.on('error', function(e) {
          return console.log(`query error: ${e}`);
        });
        return res.on('end', () => {
          var json;
          json = utils.parseResponse(body);
          return this.jdraws = utils.qresult(json);
        });
      });
    }
  },
  data: {
    count: null,
    lastDraw: {},
    ldraws: [],
    jdraws: []
  },
  created: function() {
    this.getTotalDraws();
    this.getLastDraw();
    return this.getWinners();
  }
});


//   draw no., date
//   A         B
//   lsales, lx7, lx6p, lx6, lx5, lx4, lmx7, lmx6p, lmx6, lmx5, lmx4,
//   C       D    E     F    G    H    I     J     K      L     M
//           lfx7, lfx6p, lfx6, lfx5, lfx4, ljx7, ljx6p, ljx6, ljx5, ljx4,
//           N      O     P     Q     R     S      T     U     V     W
//           lwc1, lwc2, lwc3, lwc4, lwc5, lwc6, lwc7, lwcp
//           X     Y     Z     AA    AB    AC    AD     AE
//   jsales, jx6, jx5, jx4, jx3, jx2, jx1, jmx6, jmx5, jmx4, jmx3, jmx2, jmx1,
//   AF      AG   AH   AI   AJ   AK   AL   AM    AN    AO    AP    AQ    AR
//           jfx6, jfx5, jfx4, jfx3, jfx2, jfx1, jjx6, jjx5, jjx4, jjx3, jjx2, jjx1,
//           AS    AT    AU    AV    AW    AX    AY    AZ    BA    BB    BC    BD
//           jwc
//           BE
