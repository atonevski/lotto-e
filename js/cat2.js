// Generated by CoffeeScript 1.10.0
var https, utils, vue;

utils = require('../js/utils.js');

https = require('https');

vue = new Vue({
  el: '#app',
  filters: {
    number: function(v) {
      if ((v != null) && typeof v.toLocaleString === 'function') {
        return v.toLocaleString();
      } else {
        return '';
      }
    },
    toYMD: utils.toYMD,
    toDMY: utils.toDMY
  },
  methods: {
    getLastDraw: function() {
      var q;
      q = 'SELECT A, B\nORDER BY B DESC\nLIMIT 1\nLABEL A \'number\', B \'date\'';
      return https.get(utils.qstring(q), (function(_this) {
        return function(res) {
          var body;
          body = '';
          res.setEncoding('utf-8');
          res.on('data', function(d) {
            return body += d;
          });
          res.on('error', function(e) {
            return console.log("query error: " + e);
          });
          return res.on('end', function() {
            var json;
            json = utils.parseResponse(body.toString());
            return _this.lastDraw = (utils.qresult(json))[0];
          });
        };
      })(this));
    },
    getTotalDraws: function() {
      var q;
      q = 'SELECT COUNT(A)\nLABEL COUNT(A) \'count\'';
      return https.get(utils.qstring(q), (function(_this) {
        return function(res) {
          var body;
          body = '';
          res.setEncoding('utf-8');
          res.on('data', function(d) {
            return body += d;
          });
          res.on('error', function(e) {
            return console.log("query error: " + e);
          });
          return res.on('end', function() {
            var json;
            json = utils.parseResponse(body);
            return _this.count = (utils.qresult(json))[0].count;
          });
        };
      })(this));
    },
    getWinners: function() {
      var jq, lq;
      this.ldraws = [];
      lq = 'SELECT\n  A, B, E,\n  J, O, T\nWHERE\n  E > 0\nORDER BY B\nLABEL A \'draw\', B \'date\',\n      E \'x6p\',  J \'winnings\', O \'funds\', T \'jackpot\'';
      https.get(utils.qstring(lq), (function(_this) {
        return function(res) {
          var body;
          body = '';
          res.setEncoding('utf-8');
          res.on('data', function(d) {
            return body += d;
          });
          res.on('error', function(e) {
            return console.log("query error: " + e);
          });
          return res.on('end', function() {
            var json;
            json = utils.parseResponse(body);
            return _this.ldraws = utils.qresult(json);
          });
        };
      })(this));
      this.jdraws = [];
      jq = 'SELECT\n  A, B,\n  AH, AN, AT, AZ\nWHERE\n  AH > 0\nORDER BY B\nLABEL A \'draw\', B \'date\',\n      AH \'x5\',  AN \'winnings\', AT \'funds\', AZ \'jackpot\'';
      return https.get(utils.qstring(jq), (function(_this) {
        return function(res) {
          var body;
          body = '';
          res.setEncoding('utf-8');
          res.on('data', function(d) {
            return body += d;
          });
          res.on('error', function(e) {
            return console.log("query error: " + e);
          });
          return res.on('end', function() {
            var json;
            json = utils.parseResponse(body);
            return _this.jdraws = utils.qresult(json);
          });
        };
      })(this));
    }
  },
  data: {
    count: null,
    lastDraw: {},
    ldraws: [],
    jdraws: [],
    colors: ['light-gray-c', 'white-c', 'red-c', 'green-c', 'yellow-c', 'blue-c', 'magenta-c', 'cyan-c', 'light-red-c', 'light-green-c', 'light-yellow-c', 'light-blue-c', 'light-magenta-c', 'light-cyan-c']
  },
  created: function() {
    this.getTotalDraws();
    this.getLastDraw();
    return this.getWinners();
  }
});
